<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hexo + Webhooks 部署至阿里云]]></title>
    <url>%2F2020%2F04%2F05%2FHexo%20%2B%20Webhooks%20%E9%83%A8%E7%BD%B2%E8%87%B3%E9%98%BF%E9%87%8C%E4%BA%91%2F</url>
    <content type="text"><![CDATA[解决了 Hexo 部署在 GitHub Pages 时解析龟速的尴尬问题。 绑定至主站下的二级域名 hexo.macrohard.cn，等待 SSL 证书生效。]]></content>
      <categories>
        <category>Daily</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[我的 Typecho 博客正式上线]]></title>
    <url>%2F2019%2F11%2F28%2F%E6%88%91%E7%9A%84%20Typecho%20%E5%8D%9A%E5%AE%A2%E6%AD%A3%E5%BC%8F%E4%B8%8A%E7%BA%BF%2F</url>
    <content type="text"><![CDATA[前后提交了三次申请、耗时两周，网站域名备案总算通过了。至此，我的Typecho博客正式上线。 没有打算把所有感想记录于此，计划每个阶段想一点写一点。 大一时开通过CSDN博客，也鼓捣过Hexo，在此简要叙述一下个人的体验感受。 CSDN博客具有易于操作的在线文本编辑器，支持Markdown、Mathjax等等。进行新增文章、分类等管理操作十分方便，还具有良好的SEO（不信你在百度搜索 sduwh ）。 但它的缺陷明显：广告太多，可塑性几乎没有。 Hexo是一款快速、简洁且高效的博客框架，通过Node.js框架快速渲染页面，再一键远程部署到GitHub、Coding等代码托管平台。它支持Markdown的所有功能，可以整合大量插件，可拓展性max。 此外，因为它可部署到代码托管平台呈现静态页面，所以不依赖于服务器，对比WordPress等可节省一笔开销。 缺点也有：由于所有的维护、管理操作都是在本地命令行或文件中进行的，所以在配置博客外观细节的过程中，没有经验的童鞋会被弄得晕头转向，它更适合有Web开发技术的童鞋玩耍。博客中的图片资源通常通过GitHub或图床存储，加载缓慢（简直龟速==）。 就个人而言，我更偏好采用Hexo一类的框架搭建博客，最重要的原因就是能够在实践中学习。 这次采用Typecho，是在参观PasteMe项目作者Lucien姐姐的博客之后决定的。 当时发现阿里云服务器学生套餐仅需110+r/y，就毫不犹豫地下单了。 Typecho与WordPress相似，但更加轻量。通过采用社区dalao写好的主题，可以在人性化的外观管理页面下配置外观，也能够像Hexo那样通过修改配置文件实现高度自定义。 总而言之，在我看来Typecho弥补了Hexo博客网站解析和图片加载速度慢的缺陷，管理方便也不失可塑性，爱了爱了。]]></content>
      <categories>
        <category>Daily</category>
      </categories>
      <tags>
        <tag>Typecho</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[时隔两个月发布新博客]]></title>
    <url>%2F2019%2F10%2F23%2F%E6%97%B6%E9%9A%94%E4%B8%A4%E4%B8%AA%E6%9C%88%E5%8F%91%E5%B8%83%E6%96%B0%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[这个周末就要去南京参加第一次区域赛，为了平复激动的心情才来博客里唠嗑一下。 开学以来忙忙碌碌，难以顾及博客的维护更新。 只做了一点小小的改动，修复了Prettify代码高亮JS的一个小BUG： 代码过长时没有水平滚动条而是直接换行，影响阅读体验。 此外我尝试了Hanabi，这也是Material主题内置的代码高亮插件之一，我很喜欢它的配色。 美中不足是它无法解析”&amp;”运算符，在代码块中会显示成转义字符&amp;amp;。 后来在Material主题的代码仓库Issues里意外地发现曾经有人提出了相同的问题（包括Prettify增加水平滚动条）。 根据社区dalao提供的解决方案调试一波之后修复了Hanabi字符解析问题，但它还存在一个致命BUG：代码行数过多时显示不全。遂放弃Hanabi重用Prettify。 一个多月前得知要参加10月底的区域赛，之后包括国庆假期在内的每周都做了3-4场训练赛。 这次比赛队友涵哥不参加，袁老师给我们安排了一位大三学长做队友。学长不仅ACM👍，还是个学霸。 庄大仙也很🐂，CF持续上分，已经突破蓝名了。 还天天装弱，真是可恶啊:( 自从暑假以来我的状态就一直低迷，之前立的flag也忘了。 现在常常觉得时间不够用。日子一天天过去，学校课程我没有好好学，ACM也还是那么菜。 好多好多需要学习的数据结构和算法在To do清单里等着我，也许要等鸡吃完了米、狗舔完了面、我睡足了觉。 都是瞎熬夜惹的祸，叹气Orz。 最后希望不要打铁，虽然八成没戏。嗯就这样。]]></content>
      <categories>
        <category>Daily</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[课程设计 学生成绩管理系统]]></title>
    <url>%2F2019%2F06%2F15%2F%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1-%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[功能导图 数据文件 password.txt student.txt subject.txt 源文件main.cpp 123456789101112131415161718192021222324252627#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;iomanip&gt;#include &lt;fstream&gt;#include &lt;vector&gt;#include &lt;map&gt;#include &lt;string&gt;#include &lt;algorithm&gt;#include &lt;windows.h&gt;#include "data.h"#include "student.h"#include "subject.h"#include "system.h" int main()&#123; welcome(); login(); load(); do showMenu(); while (chooseFunc()); save(); system("pause"); return 0;&#125; 头文件data.h 123456789101112131415161718192021222324252627282930313233343536#pragma once using namespace std; struct Sub&#123; string name; double weight;&#125;;map&lt;int, Sub&gt; sub; //存储所有科目信息 struct Stu&#123; string name, id; int claz; map&lt;int, int&gt; m; double gpa() &#123; double suma = 0, sumb = 0; for (auto it = m.begin(); it != m.end(); it++) &#123; suma += it-&gt;second * sub[it-&gt;first].weight; sumb += sub[it-&gt;first].weight; &#125; return suma / sumb; &#125; int sum() &#123; int res = 0; for (auto it = m.begin(); it != m.end(); it++) res += it-&gt;second; return res; &#125;&#125;;vector&lt;Stu&gt; stu; //存储所有学生信息vector&lt;Stu&gt; temp; //存储某次查询得到的学生信息 student.h 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438#pragma once using namespace std; void stuInsert()&#123; string name, id; char c; int claz, score; map&lt;int, int&gt; m; cout &lt;&lt; "请输入学生信息，按回车键开始" &lt;&lt; endl; getchar(); while ((c = getchar()) != '0') &#123; system("cls"); m.clear(); cout &lt;&lt; "姓名："; cin &gt;&gt; name; cout &lt;&lt; "学号："; cin &gt;&gt; id; cout &lt;&lt; "班级："; cin &gt;&gt; claz; for (auto it = sub.begin(); it != sub.end(); it++) &#123; cout &lt;&lt; it-&gt;second.name &lt;&lt; "成绩："; cin &gt;&gt; score; m[it-&gt;first] = score; &#125; stu.push_back(Stu&#123; name, id, claz, m &#125;); cout &lt;&lt; endl &lt;&lt; "按回车键继续输入，输入0返回根目录" &lt;&lt; endl; getchar(); &#125;&#125; void stuDelete()&#123;menu: system("cls"); cout &lt;&lt; "请输入您需要进行的操作标号" &lt;&lt; endl; cout &lt;&lt; "------------------------------" &lt;&lt; endl; cout &lt;&lt; endl &lt;&lt; "0\t返回根目录" &lt;&lt; endl; cout &lt;&lt; endl &lt;&lt; "1\t按指定学生编号逐个删除" &lt;&lt; endl; cout &lt;&lt; endl &lt;&lt; "2\t按指定班级编号批量删除" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; "------------------------------" &lt;&lt; endl; string id; int claz, ope; cin &gt;&gt; ope; switch (ope) &#123; case 0: break; case 1: system("cls"); cout &lt;&lt; "请输入需要删除信息的学生编号："; while (cin &gt;&gt; id &amp;&amp; id != "0") &#123; bool flag = false; //标记是否查询到对象 for (int i = 0; i &lt; (int)stu.size(); i++) //遍历vector，逐个检验学生是否与指定编号匹配 &#123; if (stu[i].id == id) &#123; system("cls"); flag = true; //查询到对象 cout &lt;&lt; "请确认是否删除该学生的信息[Y/N]" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; "姓名" &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; "学号" &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; "班级"; for (auto it = sub.begin(); it != sub.end(); it++) cout &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; it-&gt;second.name; cout &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; "总成绩" &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; "平均学分绩点"; cout &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; stu[i].name &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; stu[i].id &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; stu[i].claz; for (auto it = sub.begin(); it != sub.end(); it++) &#123; if (stu[i].m.count(it-&gt;first)) cout &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; stu[i].m[it-&gt;first]; else cout &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; "尚未录入"; &#125; cout &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; stu[i].sum() &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; stu[i].gpa(); cout &lt;&lt; endl; string ope; cin &gt;&gt; ope; if (ope == "Y" || ope == "y") &#123; stu.erase(stu.begin() + i); cout &lt;&lt; endl &lt;&lt; "成功删除" &lt;&lt; endl; &#125; else cout &lt;&lt; endl &lt;&lt; "取消删除" &lt;&lt; endl; break; &#125; &#125; if (!flag) //未查询到对象 cout &lt;&lt; endl &lt;&lt; "不存在该学生编号！" &lt;&lt; endl; system("pause"); system("cls"); cout &lt;&lt; "（输入0返回上级目录）" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; "请继续输入需要删除信息的学生编号："; &#125; goto menu; case 2: system("cls"); cout &lt;&lt; "请输入需要删除信息的班级编号："; while (cin &gt;&gt; claz &amp;&amp; claz) &#123; bool flag = false; //标记是否查询到对象 for (auto it = stu.begin(); it != stu.end();) //遍历vector，逐个检验学生是否属于指定班级 &#123; if (it-&gt;claz == claz) &#123; system("pause"); system("cls"); flag = true; //查询到对象 cout &lt;&lt; "请确认是否删除该学生的信息[Y/N]" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; "姓名" &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; "学号" &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; "班级"; for (auto iter = sub.begin(); iter != sub.end(); iter++) cout &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; iter-&gt;second.name; cout &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; "总成绩" &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; "平均学分绩点"; cout &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; it-&gt;name &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; it-&gt;id &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; it-&gt;claz; for (auto iter = sub.begin(); iter != sub.end(); iter++) &#123; if (it-&gt;m.count(iter-&gt;first)) cout &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; it-&gt;m[iter-&gt;first]; else cout &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; "尚未录入"; &#125; cout &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; it-&gt;sum() &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; it-&gt;gpa(); cout &lt;&lt; endl; string ope; cin &gt;&gt; ope; if (ope == "Y" || ope == "y") &#123; it = stu.erase(it); //迭代器stu.erase(it)指向被删除元素的下一个，利用其返回值避免当前迭代器失效 cout &lt;&lt; endl &lt;&lt; "成功删除" &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; endl &lt;&lt; "取消删除" &lt;&lt; endl; it++; &#125; &#125; else it++; &#125; if (!flag) //未查询到对象 cout &lt;&lt; endl &lt;&lt; "不存在该班级编号！" &lt;&lt; endl; system("pause"); system("cls"); cout &lt;&lt; "（输入0返回上级目录）" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; "请继续输入需要删除信息的班级编号："; &#125; goto menu; default: cout &lt;&lt; "指令无效，请重新输入！" &lt;&lt; endl; system("pause"); goto menu; &#125;&#125; int suborder; //存储某次按指定科目排序的科目次序 //以下为各种条件下的排序规则函数bool cmp_nameAsc(const Stu &amp;a, const Stu &amp;b) &#123; return a.name != b.name ? a.name &lt; b.name : a.id &lt; b.id; &#125;bool cmp_nameDes(const Stu &amp;a, const Stu &amp;b) &#123; return a.name != b.name ? a.name &gt; b.name : a.id &lt; b.id; &#125;bool cmp_idAsc(const Stu &amp;a, const Stu &amp;b) &#123; return a.id &lt; b.id; &#125;bool cmp_idDes(const Stu &amp;a, const Stu &amp;b) &#123; return a.id &gt; b.id; &#125;bool cmp_sumAsc(Stu &amp;a, Stu &amp;b) &#123; return a.sum() != b.sum() ? a.sum() &lt; b.sum() : a.id &lt; b.id; &#125;bool cmp_sumDes(Stu &amp;a, Stu &amp;b) &#123; return a.sum() != b.sum() ? a.sum() &gt; b.sum() : a.id &lt; b.id; &#125;bool cmp_gpaAsc(Stu &amp;a, Stu &amp;b) &#123; return a.gpa() != b.gpa() ? a.gpa() &lt; b.gpa() : a.gpa() &lt; b.gpa(); &#125;bool cmp_gpaDes(Stu &amp;a, Stu &amp;b) &#123; return a.gpa() != b.gpa() ? a.gpa() &gt; b.gpa() : a.gpa() &lt; b.gpa(); &#125;bool cmp_subAsc(Stu &amp;a, Stu &amp;b)&#123; int i = 0, sid; for (auto it = sub.begin(); it != sub.end() &amp;&amp; i &lt; suborder; it++, i++) sid = it-&gt;first; if (a.m.count(sid) &amp;&amp; b.m.count(sid)) return a.m[sid] != b.m[sid] ? a.m[sid] &lt; b.m[sid] : a.id &lt; b.id; return a.m.count(sid) ? false : b.m.count(sid) ? true : a.id &lt; b.id;&#125;bool cmp_subDes(Stu &amp;a, Stu &amp;b)&#123; int i = 0, sid; for (auto it = sub.begin(); it != sub.end() &amp;&amp; i &lt; suborder; it++, i++) sid = it-&gt;first; if (a.m.count(sid) &amp;&amp; b.m.count(sid)) return a.m[sid] != b.m[sid] ? a.m[sid] &gt; b.m[sid] : a.id &lt; b.id; return a.m.count(sid) ? true : b.m.count(sid) ? false : a.id &lt; b.id;&#125; void print() //打印某次查询得到的学生信息&#123; cout &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; "姓名" &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; "学号" &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; "班级"; for (auto it = sub.begin(); it != sub.end(); it++) cout &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; it-&gt;second.name; cout &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; "总成绩" &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; "平均学分绩点"; cout &lt;&lt; endl &lt;&lt; endl; for (int i = 0; i &lt; (int)temp.size(); i++) &#123; cout &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; temp[i].name &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; temp[i].id &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; temp[i].claz; for (auto it = sub.begin(); it != sub.end(); it++) &#123; if (temp[i].m.count(it-&gt;first)) cout &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; temp[i].m[it-&gt;first]; else cout &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; "尚未录入"; &#125; cout &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; temp[i].sum() &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; temp[i].gpa() &lt;&lt; endl &lt;&lt; endl; &#125;&#125; void stuFind()&#123;menu1: system("cls"); cout &lt;&lt; "请输入您需要进行的操作标号" &lt;&lt; endl; cout &lt;&lt; "------------------------------" &lt;&lt; endl; cout &lt;&lt; endl &lt;&lt; "0\t返回根目录" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; "1\t按指定学生姓名查询" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; "2\t按指定学生编号查询" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; "3\t按指定班级编号查询" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; "------------------------------" &lt;&lt; endl; string name, id; int claz, ope; cin &gt;&gt; ope; switch (ope) &#123; case 0: break; case 1: system("cls"); cout &lt;&lt; "请输入学生姓名："; while (cin &gt;&gt; name &amp;&amp; name != "0") &#123; temp.clear(); bool flag = false; //标记是否查询到对象 for (int i = 0; i &lt; (int)stu.size(); i++) &#123; if (stu[i].name == name) &#123; flag = true; //查询到对象 temp.push_back(stu[i]); &#125; &#125; if (!flag) //未查询到对象 cout &lt;&lt; endl &lt;&lt; "不存在该学生姓名！" &lt;&lt; endl; else &#123; system("cls"); print(); &#125; system("pause"); system("cls"); cout &lt;&lt; "（输入0返回上级目录）" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; "请继续输入需要查询的学生姓名："; &#125; goto menu1; case 2: system("cls"); cout &lt;&lt; "请输入学生编号："; while (cin &gt;&gt; id &amp;&amp; id != "0") &#123; bool flag = false; //标记是否查询到对象 for (int i = 0; i &lt; (int)stu.size(); i++) &#123; if (stu[i].id == id) &#123; system("cls"); flag = true; //查询到对象 cout &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; "姓名" &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; "学号" &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; "班级"; for (auto it = sub.begin(); it != sub.end(); it++) cout &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; it-&gt;second.name; cout &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; "总成绩" &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; "平均学分绩点"; cout &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; stu[i].name &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; stu[i].id &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; stu[i].claz; for (auto it = sub.begin(); it != sub.end(); it++) &#123; if (stu[i].m.count(it-&gt;first)) cout &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; stu[i].m[it-&gt;first]; else cout &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; "尚未录入"; &#125; cout &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; stu[i].sum() &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; stu[i].gpa(); cout &lt;&lt; endl; &#125; &#125; if (!flag) //未查询到对象 cout &lt;&lt; endl &lt;&lt; "不存在该学生编号！" &lt;&lt; endl; system("pause"); system("cls"); cout &lt;&lt; "（输入0返回上级目录）" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; "请继续输入需要查询的学生编号："; &#125; goto menu1; case 3: system("cls"); cout &lt;&lt; "请输入班级编号："; while (cin &gt;&gt; claz &amp;&amp; claz) &#123; temp.clear(); bool flag = false; //标记是否查询到对象 for (int i = 0; i &lt; (int)stu.size(); i++) &#123; if (stu[i].claz == claz) &#123; flag = true; //查询到对象 temp.push_back(stu[i]); &#125; &#125; if (!flag) //未查询到对象 &#123; cout &lt;&lt; endl &lt;&lt; "不存在该班级编号！" &lt;&lt; endl; system("pause"); system("cls"); cout &lt;&lt; "（输入0返回上级目录）" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; "请继续输入需要查询的班级编号："; continue; &#125; menu2: system("cls"); cout &lt;&lt; "请输入您需要进行的操作标号" &lt;&lt; endl; cout &lt;&lt; "--------------------------------------------------" &lt;&lt; endl; cout &lt;&lt; endl &lt;&lt; setw(5) &lt;&lt; 0 &lt;&lt; " 重新输入班级编号" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; setw(5) &lt;&lt; 1 &lt;&lt; " 按学生姓名字典升序" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; setw(5) &lt;&lt; 2 &lt;&lt; " 按学生姓名字典降序" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; setw(5) &lt;&lt; 3 &lt;&lt; " 按学生编号升序" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; setw(5) &lt;&lt; 4 &lt;&lt; " 按学生编号降序" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; setw(5) &lt;&lt; 5 &lt;&lt; " 按总成绩升序" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; setw(5) &lt;&lt; 6 &lt;&lt; " 按总成绩降序" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; setw(5) &lt;&lt; 7 &lt;&lt; " 按平均学分绩点升序" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; setw(5) &lt;&lt; 8 &lt;&lt; " 按平均学分绩点降序" &lt;&lt; endl &lt;&lt; endl; int order = 9; for (auto it = sub.begin(); it != sub.end(); it++, order += 2) &#123; cout &lt;&lt; setw(5) &lt;&lt; order &lt;&lt; " 按" &lt;&lt; it-&gt;second.name &lt;&lt; "成绩升序" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; setw(5) &lt;&lt; order + 1 &lt;&lt; " 按" &lt;&lt; it-&gt;second.name &lt;&lt; "成绩降序" &lt;&lt; endl &lt;&lt; endl; &#125; cout &lt;&lt; "--------------------------------------------------" &lt;&lt; endl; int ope; cin &gt;&gt; ope; switch (ope) &#123; case 0: break; case 1: sort(temp.begin(), temp.end(), cmp_nameAsc); system("cls"); print(); system("pause"); goto menu2; case 2: sort(temp.begin(), temp.end(), cmp_nameDes); system("cls"); print(); system("pause"); goto menu2; case 3: sort(temp.begin(), temp.end(), cmp_idAsc); system("cls"); print(); system("pause"); goto menu2; case 4: sort(temp.begin(), temp.end(), cmp_idDes); system("cls"); print(); system("pause"); goto menu2; case 5: sort(temp.begin(), temp.end(), cmp_sumAsc); system("cls"); print(); system("pause"); goto menu2; case 6: sort(temp.begin(), temp.end(), cmp_sumDes); system("cls"); print(); system("pause"); goto menu2; case 7: sort(temp.begin(), temp.end(), cmp_gpaAsc); system("cls"); print(); system("pause"); goto menu2; case 8: sort(temp.begin(), temp.end(), cmp_gpaDes); system("cls"); print(); system("pause"); goto menu2; default: if (ope &gt;= 9 &amp;&amp; ope &lt;= (int)sub.size() * 2 + 7) &#123; if (ope &amp; 1) &#123; suborder = (ope - 9) / 2 + 1; sort(temp.begin(), temp.end(), cmp_subAsc); &#125; else &#123; suborder = (ope - 10) / 2 + 1; sort(temp.begin(), temp.end(), cmp_subDes); &#125; system("cls"); print(); &#125; else cout &lt;&lt; "指令无效，请重新输入" &lt;&lt; endl; system("pause"); goto menu2; &#125; system("cls"); cout &lt;&lt; "（输入0返回上级目录）" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; "请继续输入需要查询的班级编号："; &#125; goto menu1; default: cout &lt;&lt; "指令无效，请重新输入" &lt;&lt; endl; system("pause"); goto menu1; &#125;&#125; void stuModify()&#123;menu: system("cls"); cout &lt;&lt; "请输入您需要进行的操作标号" &lt;&lt; endl; cout &lt;&lt; "-------------------------" &lt;&lt; endl; cout &lt;&lt; endl &lt;&lt; "0\t返回根目录" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; "1\t修改指定学生编号" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; "2\t修改指定班级编号" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; "-------------------------" &lt;&lt; endl; string id; int ope, score; cin &gt;&gt; ope; switch (ope) &#123; case 0: break; case 1: system("cls"); cout &lt;&lt; "请输入需要修改的学生编号："; while (cin &gt;&gt; id &amp;&amp; id != "0") &#123; bool flag = false; //标记是否查询到对象 for (int i = 0; i &lt; (int)stu.size(); i++) &#123; if (stu[i].id == id) &#123; system("cls"); flag = true; //查询到对象 cout &lt;&lt; "该学生的当前信息如下：" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; "姓名" &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; "学号" &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; "班级"; for (auto it = sub.begin(); it != sub.end(); it++) cout &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; it-&gt;second.name; cout &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; "总成绩" &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; "平均学分绩点"; cout &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; stu[i].name &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; stu[i].id &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; stu[i].claz; for (auto it = sub.begin(); it != sub.end(); it++) &#123; if (stu[i].m.count(it-&gt;first)) cout &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; stu[i].m[it-&gt;first]; else cout &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; "尚未录入"; &#125; cout &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; stu[i].sum() &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; stu[i].gpa(); cout &lt;&lt; endl &lt;&lt; endl &lt;&lt; "请输入修改后的学生信息：" &lt;&lt; endl &lt;&lt; endl; string name; int claz; cout &lt;&lt; "姓名："; cin &gt;&gt; name; stu[i].name = name; cout &lt;&lt; "学号："; cin &gt;&gt; id; stu[i].id = id; cout &lt;&lt; "班级："; cin &gt;&gt; claz; stu[i].claz = claz; for (auto it = sub.begin(); it != sub.end(); it++) &#123; cout &lt;&lt; it-&gt;second.name &lt;&lt; "成绩："; cin &gt;&gt; score; stu[i].m[it-&gt;first] = score; &#125; cout &lt;&lt; endl &lt;&lt; "成功修改" &lt;&lt; endl; break; &#125; &#125; if (!flag) //未查询到对象 cout &lt;&lt; endl &lt;&lt; "不存在该学生编号！" &lt;&lt; endl; system("pause"); system("cls"); cout &lt;&lt; "（输入0返回上级目录）" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; "请继续输入需要修改的学生编号："; &#125; goto menu; case 2: int claz, newnum; system("cls"); cout &lt;&lt; "请输入需要修改的班级编号："; while (cin &gt;&gt; claz &amp;&amp; claz) &#123; bool flag = false; //标记是否查询到对象 for (int i = 0; i &lt; (int)stu.size(); i++) &#123; if (stu[i].claz == claz) &#123; flag = true; //查询到对象 cout &lt;&lt; "请输入修改后的班级编号："; cin &gt;&gt; newnum; stu[i].claz = newnum; cout &lt;&lt; endl &lt;&lt; "成功修改" &lt;&lt; endl; &#125; &#125; if (!flag) //未查询到对象 cout &lt;&lt; endl &lt;&lt; "不存在该班级编号！" &lt;&lt; endl; system("pause"); system("cls"); cout &lt;&lt; "（输入0返回上级目录）" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; "请继续输入需要修改的班级编号："; &#125; goto menu; default: cout &lt;&lt; "指令无效，请重新输入" &lt;&lt; endl; system("pause"); goto menu; &#125;&#125; subject.hpragma once void subInsert()&#123; string name; int sid; double weight; system("cls"); cout &lt;&lt; "请输入新科目名称："; cin &gt;&gt; name; bool flag = false; //标记是否输入未重复编号 while (!flag) &#123; flag = true; cout &lt;&lt; "请输入新科目编号："; cin &gt;&gt; sid; for (auto it = sub.begin(); it != sub.end(); it++) &#123; if (it-&gt;first == sid) &#123; flag = false; cout &lt;&lt; "该编号已存在！" &lt;&lt; endl &lt;&lt; endl; break; &#125; &#125; &#125; cout &lt;&lt; "请输入新科目学分："; cin &gt;&gt; weight; sub[sid].name = name; sub[sid].weight = weight; cout &lt;&lt; endl &lt;&lt; "成功增添" &lt;&lt; endl; system("pause");&#125; void subDelete()&#123;menu: system("cls"); cout &lt;&lt; "请输入您需要进行的操作标号" &lt;&lt; endl; cout &lt;&lt; "------------------------------" &lt;&lt; endl; cout &lt;&lt; endl &lt;&lt; "0\t返回根目录" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; "1\t按指定编号删除学科" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; "2\t按指定名称删除学科" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; "------------------------------" &lt;&lt; endl; string name; int ope, sid; cin &gt;&gt; ope; bool flag = false; switch (ope) &#123; case 0: break; case 1: system("cls"); cout &lt;&lt; "请输入需要删除信息的学科编号："; cin &gt;&gt; sid; flag = false; //标记是否查询到对象 for (auto it = sub.begin(); it != sub.end(); it++) //遍历map，逐个检验学科是否与指定编号匹配 &#123; if (it-&gt;first == sid) &#123; flag = true; //查询到对象 sub.erase(it); for (int i = 0; i &lt; (int)stu.size(); i++) &#123; if (stu[i].m.count(sid)) stu[i].m.erase(sid); &#125; cout &lt;&lt; endl &lt;&lt; "成功删除" &lt;&lt; endl; break; &#125; &#125; if (!flag) //未查询到对象 cout &lt;&lt; endl &lt;&lt; "不存在该学科编号！" &lt;&lt; endl; system("pause"); system("cls"); goto menu; case 2: system("cls"); cout &lt;&lt; "请输入需要删除信息的学科名称："; cin &gt;&gt; name; flag = false; //标记是否查询到对象 for (auto it = sub.begin(); it != sub.end(); it++) //遍历map，逐个检验学科是否与指定名称匹配 &#123; if (it-&gt;second.name == name) &#123; flag = true; //查询到对象 for (int i = 0; i &lt; (int)stu.size(); i++) &#123; if (stu[i].m.count(it-&gt;first)) stu[i].m.erase(it-&gt;first); &#125; sub.erase(it); cout &lt;&lt; endl &lt;&lt; "成功删除" &lt;&lt; endl; break; &#125; &#125; if (!flag) //未查询到对象 cout &lt;&lt; endl &lt;&lt; "不存在该学科名称！" &lt;&lt; endl; system("pause"); system("cls"); goto menu; default: cout &lt;&lt; "指令无效，请重新输入！" &lt;&lt; endl; system("pause"); goto menu; &#125;&#125; void subModify()&#123;menu: system("cls"); cout &lt;&lt; "请输入您需要进行的操作标号" &lt;&lt; endl; cout &lt;&lt; "------------------------------" &lt;&lt; endl; cout &lt;&lt; endl &lt;&lt; "0\t返回根目录" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; "1\t按指定编号修改学科" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; "2\t按指定名称修改学科" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; "------------------------------" &lt;&lt; endl; string name; int ope, sid; cin &gt;&gt; ope; double weight; bool flag = false; switch (ope) &#123; case 0: break; case 1: system("cls"); cout &lt;&lt; "请输入需要修改信息的学科编号："; cin &gt;&gt; sid; flag = false; //标记是否查询到对象 for (auto it = sub.begin(); it != sub.end(); it++) //遍历map，逐个检验学科是否与指定编号匹配 &#123; if (it-&gt;first == sid) &#123; flag = true; //查询到对象 bool flagg = false; //标记是否输入未重复编号 while (!flagg) &#123; flagg = true; cout &lt;&lt; "请输入修改后的科目编号："; cin &gt;&gt; sid; for (auto it = sub.begin(); it != sub.end(); it++) &#123; if (it-&gt;first == sid) &#123; flagg = false; cout &lt;&lt; "该编号已存在！" &lt;&lt; endl &lt;&lt; endl; break; &#125; &#125; &#125; for (int i = 0; i &lt; (int)stu.size(); i++) &#123; if (stu[i].m.count(it-&gt;first)) &#123; stu[i].m[sid] = stu[i].m[it-&gt;first]; stu[i].m.erase(it-&gt;first); &#125; &#125; cout &lt;&lt; "请输入修改后的科目名称："; cin &gt;&gt; name; cout &lt;&lt; "请输入修改后的科目学分："; cin &gt;&gt; weight; sub[sid] = Sub&#123; name, weight &#125;; sub.erase(it); cout &lt;&lt; endl &lt;&lt; "成功修改" &lt;&lt; endl; break; &#125; &#125; if (!flag) //未查询到对象 cout &lt;&lt; endl &lt;&lt; "不存在该学科编号！" &lt;&lt; endl; system("pause"); system("cls"); goto menu; case 2: system("cls"); cout &lt;&lt; "请输入需要修改信息的学科名称："; cin &gt;&gt; name; flag = false; //标记是否查询到对象 for (auto it = sub.begin(); it != sub.end(); it++) //遍历map，逐个检验学科是否与指定名称匹配 &#123; if (it-&gt;second.name == name) &#123; flag = true; //查询到对象 bool flagg = false; //标记是否输入未重复编号 while (!flagg) &#123; flagg = true; cout &lt;&lt; "请输入修改后的科目编号："; cin &gt;&gt; sid; for (auto it = sub.begin(); it != sub.end(); it++) &#123; if (it-&gt;first == sid) &#123; flagg = false; cout &lt;&lt; "该编号已存在！" &lt;&lt; endl &lt;&lt; endl; break; &#125; &#125; &#125; for (int i = 0; i &lt; (int)stu.size(); i++) &#123; if (stu[i].m.count(it-&gt;first)) &#123; stu[i].m[sid] = stu[i].m[it-&gt;first]; stu[i].m.erase(it-&gt;first); &#125; &#125; cout &lt;&lt; "请输入修改后的科目名称："; cin &gt;&gt; name; cout &lt;&lt; "请输入修改后的科目学分："; cin &gt;&gt; weight; sub[sid] = Sub&#123; name, weight &#125;; sub.erase(it); cout &lt;&lt; endl &lt;&lt; "成功修改" &lt;&lt; endl; break; &#125; &#125; if (!flag) //未查询到对象 cout &lt;&lt; endl &lt;&lt; "不存在该学科名称！" &lt;&lt; endl; system("pause"); system("cls"); goto menu; default: cout &lt;&lt; "指令无效，请重新输入！" &lt;&lt; endl; system("pause"); goto menu; &#125;&#125; void subDisplay() //显示各项学科信息&#123; system("cls"); cout &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; "科目编号" &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; "科目名称" &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; "科目学分" &lt;&lt; endl &lt;&lt; endl; for (auto it = sub.begin(); it != sub.end(); it++) cout &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; it-&gt;first &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; it-&gt;second.name &lt;&lt; std::right &lt;&lt; setw(15) &lt;&lt; it-&gt;second.weight &lt;&lt; endl &lt;&lt; endl; system("pause");&#125; system.h 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157#pragma once using namespace std; void welcome()&#123; system("color 3f"); cout &lt;&lt; "--------------------------" &lt;&lt; endl; cout &lt;&lt; "欢迎使用学生信息管理系统！" &lt;&lt; endl; cout &lt;&lt; "--------------------------" &lt;&lt; endl; cout &lt;&lt; "正在加载，请稍后" &lt;&lt; endl &lt;&lt; endl; for (int i = 0; i &lt; 20; i++) &#123; Sleep(100); cout &lt;&lt; "■"; &#125; cout &lt;&lt; endl;&#125; void login() //实现登录功能&#123; system("pause"); system("cls"); ifstream file; file.open("./src/password.txt"); if (!file) &#123; cout &lt;&lt; "数据异常，无法访问！" &lt;&lt; endl; system("pause"); exit(0); &#125; string pass, input; file &gt;&gt; pass; file.close(); cout &lt;&lt; "请输入密码："; while (cin &gt;&gt; input &amp;&amp; pass != input) //检验输入串与密码是否匹配 &#123; if (input == "0") //输入指令0，取消登录操作 &#123; system("pause"); exit(0); &#125; system("cls"); cout &lt;&lt; "（输入0退出系统）" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; "密码错误，请重试："; &#125; cout &lt;&lt; endl &lt;&lt; "登录成功！" &lt;&lt; endl; system("pause");&#125; void load() //从文件中读取全部学生信息和科目信息&#123; ifstream file; file.open("./src/subject.txt"); if (!file) &#123; cout &lt;&lt; "数据异常，无法访问！" &lt;&lt; endl; system("pause"); exit(0); &#125; int sid; while (file &gt;&gt; sid) file &gt;&gt; sub[sid].name &gt;&gt; sub[sid].weight; file.close(); file.open("./src/student.txt"); if (!file) &#123; cout &lt;&lt; "数据异常，无法访问！" &lt;&lt; endl; system("pause"); exit(0); &#125; string name, id; int claz, score, nsub; map&lt;int, int&gt; m; while (file &gt;&gt; name &gt;&gt; id &gt;&gt; claz &gt;&gt; nsub) &#123; m.clear(); for (int i = 0; i &lt; nsub; i++) &#123; file &gt;&gt; sid &gt;&gt; score; m[sid] = score; &#125; stu.push_back(Stu&#123; name, id, claz, m &#125;); &#125;&#125; void save() //程序运行结束前，将学生信息和科目信息写入文件&#123; ofstream student("./src/student.txt"); for (int i = 0; i &lt; (int)stu.size(); i++) &#123; student &lt;&lt; stu[i].name &lt;&lt; " " &lt;&lt; stu[i].id &lt;&lt; " " &lt;&lt; stu[i].claz &lt;&lt; " " &lt;&lt; (int)stu[i].m.size(); for (auto it = stu[i].m.begin(); it != stu[i].m.end(); it++) student &lt;&lt; " " &lt;&lt; it-&gt;first &lt;&lt; " " &lt;&lt; it-&gt;second; student &lt;&lt; endl; &#125; student.close(); ofstream subject("./src/subject.txt"); for (auto it = sub.begin(); it != sub.end(); it++) subject &lt;&lt; it-&gt;first &lt;&lt; " " &lt;&lt; it-&gt;second.name &lt;&lt; " " &lt;&lt; it-&gt;second.weight &lt;&lt; endl;&#125; void showMenu()&#123; system("cls"); cout &lt;&lt; "请输入您需要进行的操作标号" &lt;&lt; endl; cout &lt;&lt; "---------------------" &lt;&lt; endl; cout &lt;&lt; endl &lt;&lt; "0\t退出系统" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; "1\t修改密码" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; "2\t增添学生信息" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; "3\t删除学生信息" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; "4\t修改学生信息" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; "5\t查询学生信息" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; "6\t增添科目信息" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; "7\t删除科目信息" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; "8\t修改科目信息" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; "9\t显示科目信息" &lt;&lt; endl &lt;&lt; endl; cout &lt;&lt; "---------------------" &lt;&lt; endl;&#125; void changePass()&#123; system("cls"); cout &lt;&lt; "请输入3-10位新密码：" &lt;&lt; endl; string pass; while (cin &gt;&gt; pass &amp;&amp; (pass.length() &lt; 3 || pass.length() &gt; 10)) //检验新密码长度是否符合要求 &#123; system("cls"); cout &lt;&lt; "密码不符合要求，请重新输入：" &lt;&lt; endl; &#125; ofstream file("./src/password.txt"); file &lt;&lt; pass; file.close(); system("cls"); cout &lt;&lt; "密码修改成功，新密码为：" &lt;&lt; pass &lt;&lt; endl; system("pause");&#125; bool chooseFunc()&#123; int ope; cin &gt;&gt; ope; switch (ope) &#123; case 0: return false; case 1: changePass(); break; case 2: stuInsert(); break; case 3: stuDelete(); break; case 4: stuModify(); break; case 5: stuFind(); break; case 6: subInsert(); break; case 7: subDelete(); break; case 8: subModify(); break; case 9: subDisplay(); break; default: cout &lt;&lt; "指令无效，请重新输入！" &lt;&lt; endl; system("pause"); &#125; return true;&#125;]]></content>
      <categories>
        <category>DS&amp;A</category>
      </categories>
      <tags>
        <tag>课程设计</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018-2019 大学一年级总结]]></title>
    <url>%2F2019%2F06%2F13%2F2018-2019-%E5%A4%A7%E5%AD%A6%E4%B8%80%E5%B9%B4%E7%BA%A7%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[比成功更重要的是要有内在的丰富和自己喜欢做的事情 时间飞逝，大一生活即将结束，我们也要成为人家的学长了。 这一年来的收获不少：丰富了一点社会经验，从一个幼稚的未成年人逐渐向成年人过渡；能做自己喜欢做的事情，从一个编程小白变成了ACMer；还结识了身边许多闪闪发光的dalao。 缺憾也挺多：没有花时间学习学校安排的课程；作息安排紊乱，常熬夜，没有花时间锻炼身体；阅读贫乏，没有接触人文社科。 学校课程方面对学校教务处课程安排表示不理解。作为计算机专业学生，为什么还得学大物（大雾）？为什么还得做物理实验？大学生增负虚空加课，全周全天满课了解一下？其实物理实验课不无好处：去高海拔的物院上课、交作业是一个锻炼身体的过程 #滑稽。 再就是形式主义的事情太多了：青年大学习、企业家论坛报告……虽然一直以来我都是抱着水一水的态度，但还是烦心。 说实话这一年来没怎么用心听课，虽说没有像某些人说的那样“必修课选逃，选修课必逃”，但身在曹营心在汉，感觉也差不多了：课上刷刷微博、逛逛知乎、看看CSDN，偶尔再敲敲代码……作业也必是不会写 #惭愧，貌似只有定期的英语作文会认真完成。 两个学期绩点平平，要不是考前临时突击铁定挂科==。看了一遍成绩单发现班上dalao众多，心想要想和他们通过学科绩点竞争保研名额难如登天。 很佩服那些擅长时间安排的同学，他们总是保持良好的作息习惯，早睡早起雷打不动，每天三点一线：宿舍–教室（图书馆/实验室）–食堂，并且总是能够利用碎片化时间学习，不受各种外界因素干扰。 我的室友、ACM队友涵哥就是一个典范。他曾给我分享过一个故事，出自《人性的弱点》。 Image1 Image2 别把工作当成负担，无论它是否是你所热爱的。 对我来说虽然拼绩点已经没有意义，但尽量学好各学科还是很有必要的。高数、线代、离散、数电……这些数理课程都很重要，是将来各大CS专业课程的基础。在此立下flag：下学期好好学习。 科研竞赛方面在上大学之前没有编程语言基础，对OI、ICPC等等更是一无所闻。在袁老师的引导下，第一学期循序渐进地学习了C语言程序设计，开始接触ACM。初学C语言那段时间是痛并快乐着的：老师每次在PTA上布置的题集得花一两天时间并且熬夜才能做完，肝完几套题下来编程水平也上去了，还是挺有成就感的。 ACM竞赛主要考察选手的数据结构和算法能力，但是要通过代码实现它们首先得有扎实的程序设计基础。在学习了一个学期的C语言之后，我和几个同学约定，利用寒假时间刷完了PAT乙级的往年题集。一共95道题，每天3-5道，不到一个月就能完结。PAT乙级过关，差不多便掌握了最基本的数据存储结构和相关算法，初步具备了问题抽象和建模的能力。所以如今我总是安利身边编程基础稍薄弱的同学：快去刷PAT！在寒假刷题的过程中发现了柳神的博客，通过学习她总结的《从C语言转C++简明教程》上手了STL，鸟枪换大炮。柳神的题解十分简明，并且算法高效。有时候做题没有思路或者AC了但觉得自己的代码冗长，思路不够清晰，都应该向她学习一下。 安利一波柳神的博客：https://blog.csdn.net/liuchuohttps://www.liuchuo.net/ 这学期开学后先后参加了PAT、CCCC-GPLT、ACM校内新星赛、蓝桥杯省赛。之后又和两位dalao组了队，参加了校赛、市赛、省赛。讲真，搞ACM竞赛是一件高投入但低回报的事情。提高水平的一个必要条件是花大量的时间刷大量的题，有时候要想学会一个新算法、解决一道题得花上一整天。在我看来编程是一门可以锻炼人的逻辑思维能力的艺术，我已经做好吊死在ACM这棵树上的打算了（这话听起来是不是很耳熟233）。 目前学到的一些基础数据结构与算法，只能应付一些水题。接下来的计划是暑假留校集训，这对我们新队员来说肯定会是一次很大的提升。 这里有一份别人收集整理的kuangbin题单，希望有朝一日能够刷完。https://vjudge.net/article/752 第二学期加入了一个高富帅学长带队的关于AI音乐的国创科研项目。当初申请加入项目的时候，我说我有相对音感，学长连面试都没有就录用我了（可想而知学长多么缺人）。加入项目之后主要是做些搬砖的活：收集乐谱、帮助完成数据集之类的，没有多少技术含量，下学期学完Java之后也许能在软件开发方面帮点忙。跟着去小学里做过推广，发传单、给小朋友做乐理普及之类的。还有一次路边地推的经历（其实更像是街头卖艺）。后来学长又把我拉进了他的公司，任命我为项目经理233，还给了我股份，看来以后要多为学长卖命了555（误）。 其他方面貌似没有什么特别的经历。清明小长假和室友一起去青岛玩了两天，五一小长假又把威海几个重要的景点逛了逛，挺快乐的。 一年来没看几本书，阅读贫乏所以语言贫乏。《未来简史》挺nice，但还没看完。在心情低落的那段时间，好友推荐我看了卢思浩的《愿有人陪你颠沛流离》。 比成功更重要的是要有内在的丰富和自己喜欢做的事情。 《啊哈！算法》、《算法竞赛入门经典》入门ACM不错（在我们宿舍紫书人手一本）。前些天又从祥神那里嫖来了《挑战程序设计竞赛》，要花时间啃。原版《C程序设计语言》买来至今还没翻过，陪着《Python3网络爬虫开发实战》在书架上吃灰。 一年来电影电视剧看了不少，以科幻、惊悚、悬疑和喜剧为主。看过的电影大都是爆米花式，没有几部是值得回味的。对漫威电影宇宙还不大明了，以后找时间补。在手里VPS还能用时，看了Netflix出品的一些好剧：反乌托邦《黑镜》、交互式电影《黑镜：潘达斯奈基》、成人向《性爱自修室》、科幻惊悚《怪奇物语》、血腥暴力动画《爱、死亡和机器人》，还有BBC的《9号秘事》、《神探夏洛克》。听说明年出神夏第五季，期待。暑假前追《长安十二时辰》，难得的国产好剧。 生活不能没有音乐，但歌单类型从以前的摇滚、电音变成了民谣、古典。华语流行音乐早听腻了，也许因为4536251烂大街？最近循环次数最多的几首纯音乐：Flower Dance、Heart in a Bottle、Cut in love（隐形守护者插曲）、Andhadhun Theme 02（调音师插曲）。上大学之后就再没玩过乐器，以前那些半会不会的怕是都忘光了。想弄块MIDI键盘耍耍但太贵了舍不得买，GarageBand也还没弄明白，终究和他们玩音乐的比不了啊。 旅游相册团体程序设计天梯赛 2019.03.30 中国石油大学（华东） 山东大学（威海）第六届大学生ACM程序设计竞赛 2019.04.13 威海市第四届大学生ACM程序设计竞赛 2019.04.20 北京交通大学（威海） 第十届山东省大学生ACM程序设计竞赛 2019.05.11-12 济南大学]]></content>
      <categories>
        <category>Daily</category>
      </categories>
      <tags>
        <tag>大一总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F06%2F13%2FHello-World%2F</url>
    <content type="text"><![CDATA[这是我的第一篇博文入坑Github，成功搭建Hexo博客！在此要感谢hwr dalao]]></content>
      <categories>
        <category>Daily</category>
      </categories>
  </entry>
</search>
